{"name":"erocci","tagline":"An erlang OCCI implementation","body":"# erOCCI\r\n\r\nerOCCI is a framework for building OCCI like API (similar to rOCCI or\r\npyOCNI), with the following objectives:\r\n* 100% compliance with OCCI specifications (core and rendering)\r\n* scalability\r\n* clear separation between \r\n  * rendering: text/occi, text/plain, application/occi+json, etc.\r\n  * transport: HTTP, etc (XMPP planned)\r\n  * backends: storage (Riak, etc.), \"procci\" to other APIs\r\n* small and heavily tested (planned.. but some unit tests already there)\r\n\r\n## Architecture\r\n\r\n<img src=\"https://raw.github.com/jeanparpaillon/erocci/master/doc/erocci.png\" alt=\"erocci Architectrue diagram\" />\r\n\r\n## Dependancies\r\n\r\nerocci is written in erlang. It uses the very good rebar tool for\r\ncompiling, getting dependancies, etc.  It uses the exmpp application\r\nfor XML parsing and generation.  So, before running typing 'make',\r\ninstall the following dependancies (thanks Augusto Ciuffoletti for the\r\nnotice):\r\n\r\n* erlang/OTP, version 15b1 or greater\r\n* openssl and headers\r\n* libxml2 and headers\r\n* libexpat and headers\r\n\r\nDebian and Ubuntu: apt-get install erlang libssl-dev libexpat1-dev libxml2-dev\r\n\r\n## Compiling\r\n\r\n$ make\r\n\r\nThe Makefile is wrapper around rebar. Learn quickly how to use rebar\r\nfor advanced options. The tool is particularly suited for erlang\r\napplications.\r\n\r\n## Running\r\n\r\nAs a framework, erocci is made to build applications and so is not\r\nrunnable by itself. Nevertheless, an example application is provided\r\nto let you taste, huh test OCCI.\r\n\r\n$ ./start.sh\r\n\r\nThis application will run the hello_occi application, which:\r\n* load OCCI infrastructure extension\r\n* start the Mnesia backend\r\n* start an HTTP listener on port 8080\r\n","google":"erlang,occi,framework,cloud bus","note":"Don't delete this file! It's used internally to help with page regeneration."}